# Flask-Login
@login_manager.user_loader
def get_user(user_id):
    user = User.get(user_id)
    return user

@app.route('/login', methods=['GET', 'POST'])
def login():
    # Check if user already logged in 
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()

        if user is None or not user.check_password(password):
            return redirect(url_for('login'))

        # Log in user
        login_user(user)
        return redirect(url_for('index'))

    return render_template('login.html')

@app.route('/logout', methods=['GET'])
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

# Flask-JWT-Extended
@jwt.token_in_blacklist_loader
def check_if_token_in_blacklist(decoded_token):
    jti = decoded_token['jti']
    return jti in blacklist

@app.route('/auth', methods=['POST'])
def auth():
    username = request.json.get('username')
    password = request.json.get('password')
    user = User.query.filter_by(username=username).first()

    if user is None or not user.check_password(password):
        return jsonify({
            'status': 'failure',
            'message': 'Invalid credentials'
        })

    # Create access token
    access_token = create_access_token(identity=user.id)

    return jsonify({
        'status': 'success',
        'access_token': access_token
    })
    
# Django-Auth
import django_auth

class UserViewSet(django_auth.BaseUserViewSet):
    """
    Viewset for the user model
    """
    serializer_class = UserSerializer
    queryset = User.objects.all()

    def create(self, request):
        """
        Override create method to include user registration.
        """
        serializer = self.serializer_class(data=request.data)
        if serializer.is_valid():
            user_data = {
                'username': serializer.data['username'],
                'password': serializer.data['password'],
                'email': serializer.data['email']
            }
            user = django_auth.User.objects.create_user(**user_data)
            return Response(self.serializer_class(user).data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def get_object(self):
        """
        Override get_object to support login.
        """
        if self.kwargs.get('pk') == 'login':
            username = self.request.data.get('username')
            password = self.request.data.get('password')
            ret = django.contrib.auth.authenticate(username=username, password=password)
            if ret:
                self.kwargs['pk'] = ret.pk
        return super().get_object()

# Reset Password
@app.route('/reset-password', methods=['GET', 'POST'])
def reset_password():
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['username']).first()
        if user is not None:
            user.send_password_reset_email()
            return redirect(url_for('index'))
    return render_template('reset_password.html')
